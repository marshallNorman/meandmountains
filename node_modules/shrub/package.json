{
  "_args": [
    [
      "shrub@~0.2.0",
      "/Users/marshallnorman/github/meandmountains/node_modules/sizer"
    ]
  ],
  "_from": "shrub@>=0.2.0 <0.3.0",
  "_id": "shrub@0.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/shrub",
  "_npmUser": {
    "email": "scottcorgan@gmail.com",
    "name": "scottcorgan"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "name": "shrub",
    "raw": "shrub@~0.2.0",
    "rawSpec": "~0.2.0",
    "scope": null,
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sizer"
  ],
  "_resolved": "https://registry.npmjs.org/shrub/-/shrub-0.2.0.tgz",
  "_shasum": "8d40cbd75f78faa3e86814e9dab35ea934beda2a",
  "_shrinkwrap": null,
  "_spec": "shrub@~0.2.0",
  "_where": "/Users/marshallnorman/github/meandmountains/node_modules/sizer",
  "author": {
    "name": "Scott Corgan"
  },
  "bugs": {
    "url": "https://github.com/scottcorgan/shrub/issues"
  },
  "dependencies": {
    "async": "~0.2.9",
    "walk": "~2.2.1"
  },
  "description": "Manipulate lists of files recursively in Node. Chainable API with a promise ending.",
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.14.0",
    "sinon": "~1.7.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "8d40cbd75f78faa3e86814e9dab35ea934beda2a",
    "tarball": "http://registry.npmjs.org/shrub/-/shrub-0.2.0.tgz"
  },
  "homepage": "https://github.com/scottcorgan/shrub#readme",
  "keywords": [
    "filter",
    "file",
    "size",
    "stats"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "scottcorgan@gmail.com",
      "name": "scottcorgan"
    }
  ],
  "name": "shrub",
  "optionalDependencies": {},
  "readme": "# Shrub\n\nManipulate lists of files recursively in Node. Chainable API with a promise ending.\n\n## Install\n\n```\nnpm install shrub --save\n```\n\n## Usage\n\n```js\nvar shrub = require('shrub');\n\nshrub('path/to/dir')\n  .each(function (filePath, stats, next) {\n    // Do something here\n    next();\n  })\n  .filter(function (filePath, stats, next) {\n    // Works the same as Array.prototype.filter\n    next(true);\n  }).then(function (files) {\n    // All done\n  });\n```\n\n## Methods\n\n### each(callback)\n\nAsynchronous loop through file tree Returns an array. The ` next ` callback takes no arguments.\n\n```js\nshrub('path/to/dir').each(function (filePath, stats, next) {\n  next();\n}).then(function (files) {\n\n});\n```\n\n### filter(callback)\n\nAynchronously filter the file tree. Returns an array. The ` next ` callback takes a truthy value and will filter similar to ` Array.prototype.filter `.\n\n```js\nshrub('path/to/dir').filter(function (filePath, stats, next) {\n  var isValidSize = stats.size < 10000;\n  next(isValidSize);\n}).then(function (filteredFiles) {\n  \n});\n```\n\n### find(callback)\n\nAsynchronously find a single item in the files true. Returns a single object. The ` next ` callback takes a truth value and will return the first item in the file list that is true.\n\n```js\nshrub('path/to/dir').find(function (filePath, stats, next) {\n  var isFile = stats.name ='somefile.js';\n  next(isFile);\n}).then(function (file) {\n  \n});\n```\n\n### then(callback)\n\nPromise-looking callback after all the manipulation methods have fun. Receives a ` files ` value as the only arguments (is a single object of a file if the last manipulation method is ` filter `).\n\n```js\nvar s = shrub('path/to/dir')\n  .each(function (filePath, stats, next) {\n    // Do something here\n    next();\n  })\n  .filter(function (filePath, stats, next) {\n    next(stats.size < 1);\n  });\n\n// Then, somewhere else.\ns.then(function (files) {\n  // All done\n});\n```\n\n## Run tests\n\n```\nnpm install\nnpm test\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scottcorgan/shrub.git"
  },
  "scripts": {
    "test": "node node_modules/.bin/mocha"
  },
  "version": "0.2.0"
}
